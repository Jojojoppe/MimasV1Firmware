#!/usr/bin/env python3
import sys
import mimasdriver
import threading
import time
import sys
import select

bufIn = b''
bufOut = b''

class InThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.running = True

    def run(self):
        global bufIn
        while self.running:
            i, o, e = select.select([sys.stdin], [], [], 0.1)
            if i:
                bufIn += bytes(sys.stdin.readline(), 'utf-8')
            time.sleep(0.1)

    def stop(self):
        self.running = False

class OutThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.running = True

    def run(self):
        global bufOut
        while self.running:
            if len(bufOut)>0:
                print(bufOut.decode('utf-8'), end='', flush=True)
                bufOut = b''
            time.sleep(0.1)

    def stop(self):
        self.running = False

with mimasdriver.MimasInterface() as mif:

    # empty buffers and reset system
    while True:
        gpio, ep0, ep1 = mif.hfinterface_transfer(0xff, b'', b'')
        if len(ep0)==0 and len(ep1)==0:
            break

    it = InThread()
    ot = OutThread()
    it.start()
    ot.start()

    try:
        i = 0
        while True:
            ep0len = min(len(bufIn), 16)
            ep0 = bytes(bufIn[:ep0len])
            gpio, ep0, ep1 = mif.hfinterface_transfer(i, ep0, b'')
            bufIn = bufIn[ep0len:]
            bufOut += ep0
            i += 1
            time.sleep(0.01)

    except KeyboardInterrupt:
        print("\rStopping")
        it.stop()
        ot.stop()
        it.join()
        ot.join()
    